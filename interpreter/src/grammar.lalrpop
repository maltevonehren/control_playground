use std::str::FromStr;
use crate::ast::*;

grammar;

pub Program: Program = {
    <Statements> => Program { statements: <> }
};

Statements: Vec<Statement> = {
    < (<Statement> ";") *> => <>,
}

pub(crate) Statement: Statement = {
    <Expression> => Statement::ExpressionStatement(<>),
    <name:Identifier> "=" <e:Expression> => Statement::Assign(name.into(), e),
};

pub(crate) Expression: Expression = {
    #[precedence(level="0")] // Highest precedence
    Term,
    #[precedence(level="1")]
    <f:Expression> "(" <args:ExpressionList> ")" =>
        Expression::FunctionCall {
            function: f.into(),
            arguments: args,
        },
    #[precedence(level="2")]
    "-" <Expression> => Expression::UnOp(UnOp::Neg, <>.into()),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expression> "*" <r:Expression> => Expression::BinOp(BinOp::Mul, l.into(), r.into()),
    <l:Expression> "/" <r:Expression> => Expression::BinOp(BinOp::Div, l.into(), r.into()),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expression> "+" <r:Expression> => Expression::BinOp(BinOp::Add, l.into(), r.into()),
    <l:Expression> "-" <r:Expression> => Expression::BinOp(BinOp::Sub, l.into(), r.into()),
};

Term: Expression = {
    <Float> => Expression::FloatLiteral(<>),
    <Identifier> => Expression::Identifier(<>.into()),
    <r#""[^"]*""#> => Expression::StringLiteral(<>.strip_prefix(r#"""#).unwrap().strip_suffix(r#"""#).unwrap().into()),
    "[" <ExpressionList> "]" => Expression::VectorLiteral(<>),
    <SystemDef> => Expression::System(<>),
};

pub(crate) SystemDef: Vec<SystemItem> = {
    "{" < (<SystemItem> ";") *> "}" => <>
};

SystemItem: SystemItem = {
    <output_name:Identifier> "=" <item_name:Identifier> "(" <input_name:Identifier> ")" => SystemItem {
        input_name: input_name.into(),
        item_name: item_name.into(),
        output_name: output_name.into(),
    },
}

ExpressionList = Comma<Expression>;
FloatList = Comma<Float>;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Float: f64 = {
    r"-?([0-9]+(\.[0-9]+)?)|(\.[0-9]+)" => f64::from_str(<>).unwrap(),
};

Identifier: &'input str = {
    <r"\p{L}[\p{L}\p{N}_]*">
}
